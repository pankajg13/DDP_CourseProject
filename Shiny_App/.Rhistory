pred = predict(modFit,testSA, type=chd)
View(testSA)
pred = predict(logitmodel, type="response")
pred = predict(logitmodel,newdata = testSA, type="response")
pred = predict(logitmodel,newdata = testSA, type=chd)
prediction <- predict(logitmodel, newdata = testSA)
prediction
missClass(logitmodel, prediction)
missClass(logitmodel$finalModel, prediction)
missClass(trainSA$chd, prediction)
missClass(testSA$chd, prediction)
missClass(testSA, prediction)
missClass(trainSA, prediction)
prediction1 <- predict(logitmodel, newdata = trainSA)
prediction2 <- predict(logitmodel, newdata = testSA)
missClass(trainSA$chd, prediction1)
missClass(testSA$chd, prediction2)
missClass(testSA$chd, prediction1)
?SAheart
prediction2 <- predict(logitmodel, newdata = testSA$chd)
prediction2 <- predict(logitmodel, newdata = testSA)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train
library(ElemStatLearn); data(vowel.train); data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
library(caret)
set.seed(33833)
modFit5 <- train(y~., data=vowel.train, method="rf")
varImp(modFit5)
library(ElemStatLearn); data(vowel.train); data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
library(caret)
set.seed(33833)
modFit5 <- train(y~., data=vowel.train, method="rf")
varImp(modFit5)
library(randomForest)
modelfit<-randomForest(y~.,data=vowel.train)
varImp(modFit)
training = read.csv("pml-training.csv")
testing = read.csv("pml-testing.csv")
View(training)
View(training)
names(training)
names(testing)
View(testing)
require(caret)
#1 Read Data
columns <- c("character","factor","date","Date","character","factor",rep("numeric",153),"factor")
train_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=T,strip.white=T,stringsAsFactors=F)
test_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"),header=T,strip.white=T,stringsAsFactors=F)
#the data was imported as character in may cases and that is incorrect, let's fix that
View(train_raw)
View(test_raw)
#for now colums 6-159 should be numeric
train <- train_raw
bad <- which(sapply(train,is.character))
train[bad[4:36]] <- lapply(train[bad[4:36]],as.numeric)
test <- test_raw
bad1 <- which(sapply(test,is.character))
no need to convert the test
#Do some visual exploration of the data
library(ggplot2); library(gridExtra)
vars <- setdiff(which(sapply(train, function(x) sum(!is.na(x))>0)),1:8)
pdf("Exploratory Charts v1.pdf",width=11,height = 8)
for (i in 1:length(vars)) {
ch <- ggplot(train,aes_string(x=names(train)[160],fill=names(train)[160],y=names(train)[vars[i]]))+theme_bw()+
geom_jitter(color="blue",position = position_jitter(width = .1),size=1)+theme(legend.position="none")+
geom_boxplot(alpha=0.5)
print(ch)
}
train <- train_raw
bad <- which(sapply(train,is.character))
train[bad[4:36]] <- lapply(train[bad[4:36]],as.numeric)
test <- test_raw
bad1 <- which(sapply(test,is.character))
#no need to convert the test
#Do some visual exploration of the data
library(ggplot2); library(gridExtra)
vars <- setdiff(which(sapply(train, function(x) sum(!is.na(x))>0)),1:8)
pdf("Exploratory Charts v1.pdf",width=11,height = 8)
for (i in 1:length(vars)) {
ch <- ggplot(train,aes_string(x=names(train)[160],fill=names(train)[160],y=names(train)[vars[i]]))+theme_bw()+
geom_jitter(color="blue",position = position_jitter(width = .1),size=1)+theme(legend.position="none")+
geom_boxplot(alpha=0.5)
print(ch)
}
install.packages("gridExtra")
train <- train_raw
bad <- which(sapply(train,is.character))
train[bad[4:36]] <- lapply(train[bad[4:36]],as.numeric)
test <- test_raw
bad1 <- which(sapply(test,is.character))
#no need to convert the test
#Do some visual exploration of the data
library(ggplot2); library(gridExtra)
vars <- setdiff(which(sapply(train, function(x) sum(!is.na(x))>0)),1:8)
pdf("Exploratory Charts v1.pdf",width=11,height = 8)
for (i in 1:length(vars)) {
ch <- ggplot(train,aes_string(x=names(train)[160],fill=names(train)[160],y=names(train)[vars[i]]))+theme_bw()+
geom_jitter(color="blue",position = position_jitter(width = .1),size=1)+theme(legend.position="none")+
geom_boxplot(alpha=0.5)
print(ch)
}
dev.off()
#There is a lot of missing data
round(100*table(sapply(train,function(x) sum(is.na(x))))/19622,2)
# most varibles are either complete or mostly missing
#I will chose to take the ones with full data
full_vars <- which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars <- full_vars[-(1:7)]
train_full <- subset(train,,full_vars)
train_full <- train_full[-c(1:7)]
groups <- c("_belt","_arm","_dumbbell","_forearm")
#may be highly correlated, first let's check that
#pairs(train_full[which(grepl(groups[1],names(train_full)))])
cor(train_full[which(grepl(groups[1],names(train_full)))])
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see a lot of correlation for belt
M <- abs(cor(train_full[which(grepl(groups[2],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for belt
M <- abs(cor(train_full[which(grepl(groups[3],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for dumbbell
M <- abs(cor(train_full[which(grepl(groups[4],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see very littel for forearm
pc_belt <- preProcess(train_full[which(grepl(groups[1],names(train_full)))],method="pca")
pc_belt1 <- predict(pc_belt,train_full[which(grepl(groups[1],names(train_full)))])
names(pc_belt1) <- paste(names(pc_belt1),groups[1],sep="_")
pc_arm <- preProcess(train_full[which(grepl(groups[2],names(train_full)))],method="pca")
pc_arm1 <- predict(pc_arm,train_full[which(grepl(groups[2],names(train_full)))])
names(pc_arm1) <- paste(names(pc_arm1),groups[2],sep="_")
pc_dumbbell <- preProcess(train_full[which(grepl(groups[3],names(train_full)))],method="pca")
pc_dumbbell1 <- predict(pc_dumbbell,train_full[which(grepl(groups[3],names(train_full)))])
names(pc_dumbbell1) <- paste(names(pc_dumbbell3),groups[3],sep="_")
pc_forearm <- preProcess(train_full[which(grepl(groups[4],names(train_full)))],method="pca")
pc_forearm1 <- predict(pc_forearm,train_full[which(grepl(groups[4],names(train_full)))])
names(pc_forearm1) <- paste(names(pc_forearm4),groups[4],sep="_")
pc_dumbbell <- preProcess(train_full[which(grepl(groups[3],names(train_full)))],method="pca")
pc_dumbbell1 <- predict(pc_dumbbell,train_full[which(grepl(groups[3],names(train_full)))])
names(pc_dumbbell1) <- paste(names(pc_dumbbell1),groups[3],sep="_")
pc_forearm <- preProcess(train_full[which(grepl(groups[4],names(train_full)))],method="pca")
pc_forearm1 <- predict(pc_forearm,train_full[which(grepl(groups[4],names(train_full)))])
names(pc_forearm1) <- paste(names(pc_forearm1),groups[4],sep="_")
View(test_raw)
#####Analysis ####
sum(complete.cases(train[c(8:159)])) #There are no complete cases, so we can't just work with full data
sapply(train[c(8:159)])
#I will have to drop variables or impute
#I think I have to scale the data first - then do the analysis
#it also seems the missing data is a problem, so I would likely have to impute it
#try SVD to reduce the variables
svd1 <- svd(scale(train[,c(8:159)]))
#Load Libraries
require(caret)
require(rattle)
install.packages("rattle")
require(caret)
require(rattle)
columns <- c("character","factor","date","Date","character","factor",rep("numeric",153),"factor")
train_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=T,strip.white=T,stringsAsFactors=F)
test_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"),header=T,strip.white=T,stringsAsFactors=F)
#the data was imported as character in may cases and that is incorrect, let's fix that
#for now colums 6-159 should be numeric
train <- train_raw
bad <- which(sapply(train,is.character))
train[bad[4:36]] <- lapply(train[bad[4:36]],as.numeric)
test <- test_raw
bad1 <- which(sapply(test,is.character))
#no need to convert the test
#Do some visual exploration of the data
library(ggplot2); library(gridExtra)
vars <- setdiff(which(sapply(train, function(x) sum(!is.na(x))>0)),1:8)
pdf("Exploratory Charts v1.pdf",width=11,height = 8)
for (i in 1:length(vars)) {
ch <- ggplot(train,aes_string(x=names(train)[160],fill=names(train)[160],y=names(train)[vars[i]]))+theme_bw()+
geom_jitter(color="blue",position = position_jitter(width = .1),size=1)+theme(legend.position="none")+
geom_boxplot(alpha=0.5)
print(ch)
}
dev.off()
#There is a lot of missing data
round(100*table(sapply(train,function(x) sum(is.na(x))))/19622,2)
# most varibles are either complete or mostly missing
#I will chose to take the ones with full data
full_vars <- which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars <- full_vars[-(1:7)]
train_full <- subset(train,,full_vars)
nearZeroVar(train_full) #good they have no NAs and have proper variance
groups <- c("_belt","_arm","_dumbbell","_forearm")
#may be highly correlated, first let's check that
#pairs(train_full[which(grepl(groups[1],names(train_full)))])
cor(train_full[which(grepl(groups[1],names(train_full)))])
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see a lot of correlation for belt
M <- abs(cor(train_full[which(grepl(groups[2],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for arm
M <- abs(cor(train_full[which(grepl(groups[3],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for dumbbell
M <- abs(cor(train_full[which(grepl(groups[4],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see very littel for forearm
#create pc's for each sensor
pc_belt <- preProcess(train_full[which(grepl(groups[1],names(train_full)))],method="pca")
pc_belt1 <- predict(pc_belt,train_full[which(grepl(groups[1],names(train_full)))])
names(pc_belt1) <- tolower(paste(names(pc_belt1),groups[1],sep=""))
pc_arm <- preProcess(train_full[which(grepl(groups[2],names(train_full)))],method="pca")
pc_arm1 <- predict(pc_arm,train_full[which(grepl(groups[2],names(train_full)))])
names(pc_arm1) <- tolower(paste(names(pc_arm1),groups[2],sep=""))
pc_dumbbell <- preProcess(train_full[which(grepl(groups[3],names(train_full)))],method="pca")
pc_dumbbell1 <- predict(pc_dumbbell,train_full[which(grepl(groups[3],names(train_full)))])
names(pc_dumbbell1) <- tolower(paste(names(pc_dumbbell1),groups[3],sep=""))
pc_forearm <- preProcess(train_full[which(grepl(groups[4],names(train_full)))],method="pca")
pc_forearm1 <- predict(pc_forearm,train_full[which(grepl(groups[4],names(train_full)))])
names(pc_forearm1) <- tolower(paste(names(pc_forearm1),groups[4],sep=""))
#visualize the PCs
ggplot(pc_arm1,aes(x=pc1_arm,y=pc2_arm,color=train_full$classe))+geom_point()
ggplot(pc_dumbbell1,aes(x=pc1_dumbbell,y=pc2_dumbbell,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(0,10))
ggplot(pc_belt1,aes(x=pc1_belt,y=pc2_belt,color=train_full$classe))+geom_point()
ggplot(pc_forearm1,aes(x=pc1_forearm,y=pc2_forearm,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(-5,5))
ggplot(pc_arm1,aes(x=pc1_arm,y=pc2_arm,color=train_full$classe))+geom_point()
g1 <- ggplot(pc_arm1,aes(x=pc1_arm,y=pc2_arm,color=train_full$classe))
g1 + geom_point()
#do the same for test;
test_pc_arm <- predict(pc_arm,newdata=test[row.names(pc_arm$rotation)])
names(test_pc_arm) <- tolower(paste(names(test_pc_arm),"_arm",sep=""))
test_pc_forearm <- predict(pc_forearm,newdata=test[row.names(pc_forearm$rotation)])
names(test_pc_forearm) <- tolower(paste(names(test_pc_forearm),"_forearm",sep=""))
test_pc_dumbbell <- predict(pc_dumbbell,newdata=test[row.names(pc_dumbbell$rotation)])
names(test_pc_dumbbell) <- tolower(paste(names(test_pc_dumbbell),"_dumbbell",sep=""))
test_pc_belt <- predict(pc_belt,newdata=test[row.names(pc_belt$rotation)])
names(test_pc_belt) <- tolower(paste(names(test_pc_belt),"_belt",sep=""))
test_pc <- data.frame(cbind(test_pc_arm,test_pc_belt,test_pc_dumbbell,test_pc_forearm))
#combine all the PCs into an analysis set
train_pc <- data.frame(cbind(pc_belt1,pc_arm1,pc_dumbbell1,pc_forearm1),classe=train_full$classe)
#I also want to try PCs across all variables
pc_all <- preProcess(train_full,method="pca")
pc_all1 <- predict(pc_forearm,train_full])
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
#####Analysis ####
sum(complete.cases(train_pc))
#Always a good idea to start with a tree
model1 <- train(classe~.,data=train_pc,method="rpart")
model1$finalModel
fancyRpartPlot(model1$finalModel) #this did not work at all as it is not predicting C or E
#Lets try a more complicated approach - Random Forest that is more robust
model2 <- train(classe~.,data=train_pc,method="rf")
which(grepl(groups[1],names(train_full)))
round(100*table(sapply(train,function(x) sum(is.na(x))))/19622,2)
sapply(train,function(x) sum(is.na(x)))
table(sapply(train,function(x) sum(is.na(x))))
100*table(sapply(train,function(x) sum(is.na(x))))/19622
sapply(train,function(x) sum(is.na(x)))==0
table(sapply(train,function(x) sum(is.na(x))) == 0)
which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars <- which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars[-(1:7),]
full_vars[-(1:7)]
full_vars <- full_vars[-(1:7)]
full_vars <- full_vars[-(1:7)]
full_vars <- which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars <- full_vars[-(1:7)]
full_vars
train_full <- subset(train,,full_vars)
nearZeroVar(train_full)
train_full
groups <- c("_belt","_arm","_dumbbell","_forearm")
grepl(groups[1]
)
grepl(groups[1],names(train_full))
?grepl
cor(train_full[which(grepl(groups[1],names(train_full)))])
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
M
M <- abs(cor(train_full[which(grepl(groups[2],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M <- abs(cor(train_full[which(grepl(groups[3],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
M <- abs(cor(train_full[which(grepl(groups[4],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
?preProcess
pc_belt <- preProcess(train_full[which(grepl(groups[1],names(train_full)))],method="pca")
pc_belt1 <- predict(pc_belt,train_full[which(grepl(groups[1],names(train_full)))])
names(pc_belt1) <- tolower(paste(names(pc_belt1),groups[1],sep=""))
pc_arm <- preProcess(train_full[which(grepl(groups[2],names(train_full)))],method="pca")
pc_arm1 <- predict(pc_arm,train_full[which(grepl(groups[2],names(train_full)))])
names(pc_arm1) <- tolower(paste(names(pc_arm1),groups[2],sep=""))
pc_dumbbell <- preProcess(train_full[which(grepl(groups[3],names(train_full)))],method="pca")
pc_dumbbell1 <- predict(pc_dumbbell,train_full[which(grepl(groups[3],names(train_full)))])
names(pc_dumbbell1) <- tolower(paste(names(pc_dumbbell1),groups[3],sep=""))
pc_forearm <- preProcess(train_full[which(grepl(groups[4],names(train_full)))],method="pca")
pc_forearm1 <- predict(pc_forearm,train_full[which(grepl(groups[4],names(train_full)))])
names(pc_forearm1) <- tolower(paste(names(pc_forearm1),groups[4],sep=""))
View(pc_arm1)
g <- ggplot(pc_arm1,aes(x=pc1_arm,y=pc2_arm,color=train_full$classe))
g + geom_point()
plot(pc_arm1$pc1_arm,pc_arm1$pc2_arm)
View(test_pc_arm)
pc_arm$rotation
test_pc_arm <- predict(pc_arm,newdata=test[row.names(pc_arm$rotation)])
names(test_pc_arm) <- tolower(paste(names(test_pc_arm),"_arm",sep=""))
test_pc_forearm <- predict(pc_forearm,newdata=test[row.names(pc_forearm$rotation)])
names(test_pc_forearm) <- tolower(paste(names(test_pc_forearm),"_forearm",sep=""))
test_pc_dumbbell <- predict(pc_dumbbell,newdata=test[row.names(pc_dumbbell$rotation)])
names(test_pc_dumbbell) <- tolower(paste(names(test_pc_dumbbell),"_dumbbell",sep=""))
test_pc_belt <- predict(pc_belt,newdata=test[row.names(pc_belt$rotation)])
names(test_pc_belt) <- tolower(paste(names(test_pc_belt),"_belt",sep=""))
c_all <- preProcess(train_full,method="pca")
pc_all1 <- predict(pc_all,train_full])
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
View(train_full)
pc_all <- preProcess(train_full[-53],method="pca")
pc_all1 <- predict(pc_all,train_full])
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
pc_all <- preProcess(train_full[-53],method="pca")
pc_all1 <- predict(pc_all,train_full)
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
pc_all <- preProcess(train_full[-53],method="pca")
pc_all1 <- predict(pc_all,train_full[-53])
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
View(pc_all1)
View(train_pc)
sum(complete.cases(train_pc))
model1 <- train(classe~.,data=train_pc,method="rpart")
model1$finalModel
fancyRpartPlot(model1$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(model1$finalModel)
model2 <- train(classe~.,data=train_pc,method="rf")
#Load Libraries
require(caret)
require(rattle)
#1 Read Data
columns <- c("character","factor","date","Date","character","factor",rep("numeric",153),"factor")
train_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=T,strip.white=T,stringsAsFactors=F)
test_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"),header=T,strip.white=T,stringsAsFactors=F)
#the data was imported as character in may cases and that is incorrect, let's fix that
#for now colums 6-159 should be numeric
train <- train_raw
bad <- which(sapply(train,is.character))
train[bad[4:36]] <- lapply(train[bad[4:36]],as.numeric)
test <- test_raw
bad1 <- which(sapply(test,is.character))
#no need to convert the test
#Do some visual exploration of the data
library(ggplot2); library(gridExtra)
vars <- setdiff(which(sapply(train, function(x) sum(!is.na(x))>0)),1:8)
pdf("Exploratory Charts v1.pdf",width=11,height = 8)
for (i in 1:length(vars)) {
ch <- ggplot(train,aes_string(x=names(train)[160],fill=names(train)[160],y=names(train)[vars[i]]))+theme_bw()+
geom_jitter(color="blue",position = position_jitter(width = .1),size=1)+theme(legend.position="none")+
geom_boxplot(alpha=0.5)
print(ch)
}
dev.off()
#There is a lot of missing data
round(100*table(sapply(train,function(x) sum(is.na(x))))/19622,2)
# most varibles are either complete or mostly missing
#I will chose to take the ones with full data
full_vars <- which(sapply(train,function(x) sum(is.na(x)))==0)
full_vars <- full_vars[-(1:7)]
train_full <- subset(train,,full_vars)
nearZeroVar(train_full) #good they have no NAs and have proper variance
groups <- c("_belt","_arm","_dumbbell","_forearm")
#may be highly correlated, first let's check that
#pairs(train_full[which(grepl(groups[1],names(train_full)))])
cor(train_full[which(grepl(groups[1],names(train_full)))])
M <- abs(cor(train_full[which(grepl(groups[1],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see a lot of correlation for belt
M <- abs(cor(train_full[which(grepl(groups[2],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for arm
M <- abs(cor(train_full[which(grepl(groups[3],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see some correlation for dumbbell
M <- abs(cor(train_full[which(grepl(groups[4],names(train_full)))]))
diag(M) <- 0
which(M > 0.8,arr.ind=T)
#I see very littel for forearm
#create pc's for each sensor
pc_belt <- preProcess(train_full[which(grepl(groups[1],names(train_full)))],method="pca")
pc_belt1 <- predict(pc_belt,train_full[which(grepl(groups[1],names(train_full)))])
names(pc_belt1) <- tolower(paste(names(pc_belt1),groups[1],sep=""))
pc_arm <- preProcess(train_full[which(grepl(groups[2],names(train_full)))],method="pca")
pc_arm1 <- predict(pc_arm,train_full[which(grepl(groups[2],names(train_full)))])
names(pc_arm1) <- tolower(paste(names(pc_arm1),groups[2],sep=""))
pc_dumbbell <- preProcess(train_full[which(grepl(groups[3],names(train_full)))],method="pca")
pc_dumbbell1 <- predict(pc_dumbbell,train_full[which(grepl(groups[3],names(train_full)))])
names(pc_dumbbell1) <- tolower(paste(names(pc_dumbbell1),groups[3],sep=""))
pc_forearm <- preProcess(train_full[which(grepl(groups[4],names(train_full)))],method="pca")
pc_forearm1 <- predict(pc_forearm,train_full[which(grepl(groups[4],names(train_full)))])
names(pc_forearm1) <- tolower(paste(names(pc_forearm1),groups[4],sep=""))
#visualize the PCs
g1 <- ggplot(pc_arm1,aes(x=pc1_arm,y=pc2_arm,color=train_full$classe))
g1 + geom_point()
ggplot(pc_dumbbell1,aes(x=pc1_dumbbell,y=pc2_dumbbell,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(0,10))
ggplot(pc_belt1,aes(x=pc1_belt,y=pc2_belt,color=train_full$classe))+geom_point()
ggplot(pc_forearm1,aes(x=pc1_forearm,y=pc2_forearm,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(-5,5))
#do the same for test;
test_pc_arm <- predict(pc_arm,newdata=test[row.names(pc_arm$rotation)])
names(test_pc_arm) <- tolower(paste(names(test_pc_arm),"_arm",sep=""))
test_pc_forearm <- predict(pc_forearm,newdata=test[row.names(pc_forearm$rotation)])
names(test_pc_forearm) <- tolower(paste(names(test_pc_forearm),"_forearm",sep=""))
test_pc_dumbbell <- predict(pc_dumbbell,newdata=test[row.names(pc_dumbbell$rotation)])
names(test_pc_dumbbell) <- tolower(paste(names(test_pc_dumbbell),"_dumbbell",sep=""))
test_pc_belt <- predict(pc_belt,newdata=test[row.names(pc_belt$rotation)])
names(test_pc_belt) <- tolower(paste(names(test_pc_belt),"_belt",sep=""))
test_pc <- data.frame(cbind(test_pc_arm,test_pc_belt,test_pc_dumbbell,test_pc_forearm))
#combine all the PCs into an analysis set
train_pc <- data.frame(cbind(pc_belt1,pc_arm1,pc_dumbbell1,pc_forearm1),classe=train_full$classe)
#I also want to try PCs across all variables
pc_all <- preProcess(train_full[-53],method="pca")
pc_all1 <- predict(pc_all,train_full[-53])
names(pc_all1) <- tolower(paste(names(pc_all1),"all",sep="_"))
#####Analysis ####
sum(complete.cases(train_pc))
#Load Libraries
require(caret)
require(rattle)
#1 Read Data
columns <- c("character","factor","date","Date","character","factor",rep("numeric",153),"factor")
train_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=T,strip.white=T,stringsAsFactors=F)
train_raw <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"),header=T,strip.white=T,stringsAsFactors=F)
g1 + geom_point()
ggplot(pc_dumbbell1,aes(x=pc1_dumbbell,y=pc2_dumbbell,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(0,10))
ggplot(pc_belt1,aes(x=pc1_belt,y=pc2_belt,color=train_full$classe))+geom_point()
ggplot(pc_forearm1,aes(x=pc1_forearm,y=pc2_forearm,color=train_full$classe))+geom_point()+coord_cartesian(ylim=c(-5,5))
model1 <- train(classe~.,data=train_pc,method="rpart")
model1$finalModel
fancyRpartPlot(model1$finalModel)
model2 <- train(classe~.,data=train_pc,method="rf")
model2 <- train(classe~.,data=train_pc,method="rf")
?randomforest()
random forest
?randomForest
model2 <- randomForest(classe~.,data=train_pc)
model2
confusionMatrix(model2)
results2 <- data.frame(actual=train_pc$classe,predicted=predict(model2))
ggplot(results2,aes(x=actual,y=predicted,color=actual))+geom_jitter(size=0.5,alpha=0.5)+theme_bw()+theme(legend.position="none")
test2 <- data.frame(actual=train_pc$classe,predicted=predict(model2))
View(test2)
rep("A", 20)
answers = rep("A", 20)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
View(train_full)
results1 <- data.frame(actual=train_pc$classe,predicted=predict(model1))
View(results1)
ggplot(results1,aes(x=actual,y=predicted,color=actual))+geom_jitter(size=0.5,alpha=0.5)+theme_bw()+theme(legend.position="none")
shiny::runApp('C:/Users/Pankaj/shiny-dev-gallery/upload-file')
shiny::runApp('C:/Users/Pankaj/shiny-dev-gallery/example-06-tabsets')
shiny::runApp('C:/Users/Pankaj/shiny-dev-gallery/upload-file')
shiny::runApp('C:/Users/Pankaj/shiny-dev-gallery/example-06-tabsets')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('shiny')
shiny::runApp('C:/Users/Pankaj/Desktop')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
install.packages(c('ggplot2', 'shiny'))
shinyapps::setAccountInfo(name='pankajg13', token='1DD9ED27FD61004B0EDD70C88FFB162E', secret='recpgppC+xGDM94LVEdETEwoCpBNjxxUmWquIZka')
setwd("C:/Users/Pankaj/DDP_CourseProject/Shiny App/")
runApp()
library(shiny)
runApp()
deploayApp()
deployApp()
library(shinyapps)
deployApp()
shinyapps::deployApp
deployApp()
shiny::runApp()
